import pandas as pd
import numpy as np
import statsmodels.formula.api as smf

df1 = pd.read_csv("/dbfs/FileStore/shared_uploads/Louis.Carpenter@zz.com/Top_10_Elastic-1.csv")
#df1['t']=np.linspace(start=1,stop=31,num=31)
df1['product']

#SARIMA
import warnings
import itertools
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import scipy
import statsmodels as sm

import matplotlib

data=df1

ts = data[['date','rate']]
ts['date'] = pd.to_datetime(ts['date'])
data


ts.isnull().sum()
ts = ts.dropna()
ts.isnull().sum()
ts=ts.set_index('date')

ts_month_avg = ts['rate'].resample('MS').mean()
ts_month_avg.plot(figsize = (15, 6))
plt.show()


import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import statsmodels.api as sm
from scipy import stats
from statsmodels.tsa.arima.model import ARIMA
from pylab import rcParams
#import statsmodels.api as sm
rcParams['figure.figsize'] = 18, 8
decomposition = sm.tsa.seasonal_decompose(ts_month_avg, model='additive')
fig = decomposition.plot()
plt.show()

from statsmodels.tsa.stattools import adfuller
def adf_test(timeseries):
    #Perform Dickey-Fuller test:
    print ('Results of Dickey-Fuller Test:')
    dftest = adfuller(timeseries, autolag='AIC')
    dfoutput = pd.Series(dftest[0:4], index=['Test Statistic','p-value','#Lags Used','Number of Observations Used'])
    for key,value in dftest[4].items():
       dfoutput['Critical Value (%s)'%key] = value
    print (dfoutput)

print(adf_test(ts_month_avg))


ts_t_adj = ts_month_avg - ts_month_avg.shift(1)
ts_t_adj = ts_t_adj.dropna()
ts_t_adj.plot()

from statsmodels.tsa.stattools import adfuller
def adf_test(timeseries):
    #Perform Dickey-Fuller test:
    print ('Results of Dickey-Fuller Test:')
    dftest = adfuller(ts_t_adj, autolag='AIC')
    dfoutput = pd.Series(dftest[0:4], index=['Test Statistic','p-value','#Lags Used','Number of Observations Used'])
    for key,value in dftest[4].items():
       dfoutput['Critical Value (%s)'%key] = value
    print (dfoutput)
    
print(adf_test(ts_month_avg))

ts_s_adj = ts_t_adj - ts_t_adj.shift(1)
ts_s_adj = ts_s_adj.dropna()
ts_s_adj.plot()

from statsmodels.tsa.stattools import adfuller
def adf_test(timeseries):
    #Perform Dickey-Fuller test:
    print ('Results of Dickey-Fuller Test:')
    dftest = adfuller(ts_s_adj, autolag='AIC')
    dfoutput = pd.Series(dftest[0:4], index=['Test Statistic','p-value','#Lags Used','Number of Observations Used'])
    for key,value in dftest[4].items():
       dfoutput['Critical Value (%s)'%key] = value
    print (dfoutput)
    
print(adf_test(ts_month_avg))
 
 
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf
plot_acf(ts_t_adj)
matplotlib.pyplot.show()
plot_pacf(ts_t_adj)
matplotlib.pyplot.show()

plot_acf(ts_s_adj)
matplotlib.pyplot.show()
plot_pacf(ts_s_adj)
matplotlib.pyplot.show()

p = range(0, 4)
d = range(0,1)
q = range(0, 3)
pdq = list(itertools.product(p, d, q))
seasonal_pdq = [(x[0], x[1], x[2], 12) for x in list(itertools.product(p, d, q))]
print('Examples of parameter combinations for Seasonal ARIMA...')
print('SARIMAX: {} x {}'.format(pdq[1], seasonal_pdq[1]))
print('SARIMAX: {} x {}'.format(pdq[1], seasonal_pdq[2]))
print('SARIMAX: {} x {}'.format(pdq[2], seasonal_pdq[3]))
seasonal_pdq

for param in pdq:
    for param_seasonal in seasonal_pdq:
        try:
            mod = sm.tsa.statespace.SARIMAX(ts_s_adj,
                                            order=param,
                                            seasonal_order=param_seasonal,
                                            )
            results = mod.fit(method = 'powell')
            print('ARIMA{}x{}12 - AIC:{}'.format(param, param_seasonal, results.aic))
        except:
            continue
 
 #ARIMA((1, 0, 0)x(3, 0, 0, 12)
mod = sm.tsa.statespace.SARIMAX(ts_s_adj,
                                order=(2, 0, 1),
                                seasonal_order=(0,0,2,12))
results = mod.fit(method = 'powell')
print(results.summary().tables[1])

results.plot_diagnostics(figsize=(18, 8))
plt.show()

pred = results.get_prediction(start=pd.to_datetime('2020-03-01'), dynamic=False)
pred_ci = pred.conf_int()
ax = ts_s_adj.plot(label='observed')
pred.predicted_mean.plot(ax=ax, label='One-step ahead Forecast', alpha=.7, figsize=(14, 4))
ax.fill_between(pred_ci.index,
                pred_ci.iloc[:, 0],
                pred_ci.iloc[:, 1], color='k', alpha=.2)
ax.set_xlabel('Date')
ax.set_ylabel('AQI')
plt.legend()
plt.show()

y_forecasted = pred.predicted_mean
y_truth = ts_s_adj['2020-03-01':]
mse = ((y_forecasted - y_truth) ** 2).mean()
print('The Mean Squared Error is {}'.format(round(mse, 2)))
print('The Root Mean Squared Error is {}'.format(round(np.sqrt(mse), 2)))



pred_uc = results.get_forecast(steps=18)
pred_ci = pred_uc.conf_int()
ax = ts_s_adj.plot(label='observed', figsize=(14, 4))
pred_uc.predicted_mean.plot(ax=ax, label='Forecast')
ax.fill_between(pred_ci.index,
                pred_ci.iloc[:, 0],
                pred_ci.iloc[:, 1], color='k', alpha=.25)
ax.set_xlabel('Date')
ax.set_ylabel('Sales')
plt.legend()
plt.show()

forecast = pred_uc.predicted_mean 


 
 
